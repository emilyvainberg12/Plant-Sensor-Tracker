<!DOCTYPE html>
<html>
	<head>
		<script src="https://d3js.org/d3.v4.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
		<title>Plant Sitter</title>
	</head>
	<style>
		/* Style The Dropdown Button */
		/*
		h1 {
			color: blue;
		}
		*/
		body {
			background-color: rgb(222, 255, 222);
		}
		.dropbtn {
		  background-color: lightblue;
		  color: white;
		  padding: 16px;
		  font-size: 16px;
		  border: none;
		  cursor: pointer;
		}
		
		/* The container <div> - needed to position the dropdown content */
		.dropdown {
		  position: relative;
		  display: inline-block;
		}
		
		/* Dropdown Content (Hidden by Default) */
		.dropdown-content {
		  display: none;
		  position: absolute;
		  background-color: #f9f9f9;
		  min-width: 160px;
		  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
		  z-index: 1;
		}
		
		/* Links inside the dropdown */
		.dropdown-content a {
		  color: black;
		  padding: 12px 16px;
		  text-decoration: none;
		  display: block;
		}
		
		/* Change color of dropdown links on hover */
		.dropdown-content a:hover {background-color: #f1f1f1}
		
		/* Show the dropdown menu on hover */
		.dropdown:hover .dropdown-content {
		  display: block;
		}
		
		/* Change the background color of the dropdown button when the dropdown content is shown */
		.dropdown:hover .dropbtn {
		  background-color: lightblue;
		}
		.table, th, td {
			text-align: center;
			border: 1px solid;
			width: 500px;
			height: 40px;
		}
		</style>

	<body>
		<center>
		<h1>Plant Sitter</h1>

		</center>
		<br> <br>
		<caption style="font-weight: bold">Your Plants: </caption>
		<table id="plants">
			<tr>
				<th id="test">Plant Name </th>
				<th>Recommened Water </th>
				<th>Recommended Light </th>
			</tr>
		</table>
		<br> <br>
		<label for="plants">Current Plant to Track: </label>
		<select name="plantSelect" id="plantSelect">
			<option value="Mint Leaf">Mint</option>
			<option value="Orchid">Orchid</option>
			<option value="Cactus">Cactus</option>
		</select>
		<button id="addPlant">Choose</button>
		<br><br>
		<div id="charts">
		<canvas id="water" style="width:100%;max-width:500px; height:300px"></canvas>
		<br>
		<canvas id="light" style="width:100%;max-width:500px; height:300px"></canvas>
		<br>
		<canvas id="waterWeek" style="width:100%;max-width:500px; height:300px"></canvas>
		<br>
		<canvas id="lightWeek" style="width:100%;max-width:500px; height:300px"></canvas>
		</div>

		<script>
			let moisture = 0;
			let light = 0;
			var xValuesLight = ["M- Light", "T- Light", "W- Light", "Th- Light","F- Light", "Sa- Light", "Su- Light"];
			var xValuesWater = ["M- Moisture", "T- Moisture", "W- Moisture",  "Th- Moisture", "F- Moisture", "Sa- Moisture", "Su- Moisture"];
			var yValuesLight = [];
			var yValuesWater = [];
			PlantInformation = [["Mint Leaf", "7 day a week", "indoor shade", "Tomorrow"],["Orchid", "1 day a week", "indoor sun", "Friday"], 
			["Cactus", "2 time a month", "outdoor sun", "Monday 21st"]]
			// first array is the light values
			// second array is the moisture values 
			PlantLineValues = {"Mint Leaf": [[400,400,400,400,400,400,400], [400,400,400,400,400,400,400]], "Orchid": [[300,300,300,300,300,300,300], [400,400,400,400,400,400,400]], "Cactus": [[700,700,700,700,700,700,700], [250,250,250,250,250,250,250]]};
	
			for (var i = 0; i < PlantInformation.length; i++){
				var t = "";
				var tr = "<tr>";
				tr += "<td>"+PlantInformation[i][0]+"</td>";
				tr += "<td>"+PlantInformation[i][1]+"</td>";
				tr += "<td>"+PlantInformation[i][2]+"</td>";
				// tr += "<td>"+PlantInformation[i][3]+"</td>";
				tr += "</tr>";
				t += tr;
				document.getElementById("plants").innerHTML += t;
			}
			var timer = null;
			//Update saved_plants upon clicking ADD button
			let plantBtn = document.getElementById("addPlant");
			let myPlant = ""
			function addPlant() {
				if (timer) {
					clearInterval(timer);
				}
				myPlant = document.getElementById("plantSelect").value
				addData(null)
				addChart(myPlant)
				updateChart(); //want to fix the colors but unsure how
				timer = setInterval(() => 
				{
					addData(null)
					//addChart(myPlant)
					console.log('updating');
					updateChart();
				}
				, 1000); //Repeat every x seconds
			}
			plantBtn.addEventListener('click', addPlant);

			async function load(url) {
				let obj = null;
				try {
					obj = await (await fetch(url)).json();
				} catch(e) {
					console.log('error');
				}
				console.log(obj);
			}

			fetch("http://192.168.40.40/ellie")
				.then((response) => response.json())
				.then((data) => addData(data))
				.then((data) => console.log(data));

			// addData(null)	
			//myDictionary = {'moisture': [5, 6, 4, 8, 9, 5, 5, 5], 'light':[620, 640, 450, 630, 660,610,624,540]}
			function addData(data){
				//TODO: replace myDictionary with DATA bc info needs to be recived from launchpad: should be same format  
				//myDictionary = {'moisture': [5, 6, 4, 8, 9, 5, 5, 5], 'light':[620, 640, 450, 630, 660,610,624,540]}
				//temp code to test dynamically changing graph
				/*
				myDictionary['light'].shift();
				myDictionary['moisture'].shift();
				myDictionary['light'].push((Math.random() - 0.5) * PlantLineValues[document.getElementById("plantSelect").value][0][0] * 0.05 + myDictionary['light'][6]);
				myDictionary['moisture'].push((Math.random() - 0.5) * PlantLineValues[document.getElementById("plantSelect").value][1][0] * 0.05 + myDictionary['moisture'][6]);
				*/
				myDictionary = {'moisture': [450, 460, 404, 408, 509, 450, 405, 405], 'light':[620, 640, 450, 630, 660,610,624,540], 'light average': [334,623,476,525,420,500,0], 'moisture average': [401,384,359,138,15,0,0]}																					
				moistureArray = myDictionary['moisture']
				lightArray = myDictionary['light']
				moistureWeek = myDictionary['moisture average']
				lightWeek = myDictionary['light average']
				yValuesWater = [];
				yValuesLight= [];
				yValuesWaterWeek = [];
				yValuesLightWeek= [];
				for (var x = 0; x < moistureArray.length; x++) {
					console.log(moistureArray[x])
					yValuesWater.push(moistureArray[x])
				}
				for (var x = 0; x < lightArray.length; x++) {
					yValuesLight.push(lightArray[x])
				}
				for (var x = 0; x < moistureWeek.length; x++) {
					console.log(moistureWeek[x])
					yValuesWaterWeek.push(moistureWeek[x])
				}
				for (var x = 0; x < lightWeek.length; x++) {
					yValuesLightWeek.push(lightWeek[x])
				}
			}

			var lightChart;
			var waterChart;

			function addChart(myPlant){
				if (lightChart) {
					lightChart.destroy();
				}
				if (waterChart) {
					waterChart.destroy();
				}
				var currentChart1 = "water"
				var currentChart2 = "light"
				var currentChart3 = "waterWeek"
				var currentChart4 = "lightWeek"
				lightChart = new Chart(currentChart1, {
				type: "bar",
				data: { 
					labels: xValuesLight,
					datasets: [{
						type: 'bar',
						backgroundColor: 'orange',
						data: yValuesLight
					},{
						type: 'line',
						data : PlantLineValues[myPlant][0],
						borderColor: 'lightgreen',
						fill: false
					},
					]
					},
				options: {
					legend: {display: false},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					},
					title: {
						display: true,
						text: "Daily Light Data for Plant: " + myPlant
					},
					chartArea: {
						backgroundColor: 'rgb(75, 192, 192)',
					}
				}
				});

				waterChart = new Chart(currentChart2, {
				type: "bar",
				data: {
					labels: xValuesWater,
					datasets: [{
						backgroundColor: 'lightblue',
						data: yValuesWater
					},
					{
						type: 'line',
						data : PlantLineValues[myPlant][1],
						borderColor: 'lightgreen',
						fill: false
					},
					]
					},
				options: {
					legend: {display: false},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					},
					title: {
						display: true,
						text: "Daily Moisture Data for Plant: " + myPlant
					},
					chartArea: {
						backgroundColor: 'rgb(75, 192, 192)',
					}
				}
				});

				WeeklylightChart = new Chart(currentChart3, {
				type: "bar",
				data: { 
					labels: xValuesLight,
					datasets: [{
						type: 'bar',
						backgroundColor: 'orange',
						data: yValuesLightWeek
					},{
						type: 'line',
						data : PlantLineValues[myPlant][0],
						borderColor: 'lightgreen',
						fill: false
					},
					]
					},
				options: {
					legend: {display: false},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					},
					title: {
						display: true,
						text: "Weekly Light Data for Plant: " + myPlant
					},
					chartArea: {
						backgroundColor: 'rgb(75, 192, 192)',
					}
				}
				});
				WeeklywaterChart = new Chart(currentChart4, {
				type: "bar",
				data: {
					labels: xValuesWater,
					datasets: [{
						backgroundColor: 'lightblue',
						data: yValuesWaterWeek
					},
					{
						type: 'line',
						data : PlantLineValues[myPlant][1],
						borderColor: 'lightgreen',
						fill: false
					},
					]
					},
				options: {
					legend: {display: false},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					},
					title: {
						display: true,
						text: "Weekly Moisture Data for Plant: " + myPlant
					},
					chartArea: {
						backgroundColor: 'rgb(75, 192, 192)',
					}
				}
				});
			}

			function updateChart(lightData, waterData) {
				//update data fields of lightChart and waterChart
				//shift x-axes and y-axes left by one (so last 7 days are displayed)
				//add new column (day that was replaced)
				//lightChart.options.title.text = 'test title!';
				first_day = lightChart.data.labels.shift();
				lightChart.data.labels.push(first_day);
				lightChart.data.datasets[0].data = yValuesLight;
				//lightChart.data.datasets[0].data.shift();
				//lightChart.data.datasets[0].data.push(lightData);

				first_day = waterChart.data.labels.shift();
				waterChart.data.labels.push(first_day);
				waterChart.data.datasets[0].data = yValuesWater;
				//waterChart.data.datasets[0].data.shift();
				//waterChart.data.datasets[0].data.push(waterData);

				let colors = getBGColors();
				lightChart.data.datasets[0].backgroundColor = colors.light;
				waterChart.data.datasets[0].backgroundColor = colors.water;
				console.log(colors);

				lightChart.update();
				waterChart.update();
			}

			//This can be a dict of flowers which are dicts structured as {light: 100, water: 100}
			function getBGColors() {
				var lightData = lightChart.data.datasets[0].data;
				var waterData = waterChart.data.datasets[0].data;
				var percentDiff = 0.6;
				var colors;
				colors = {light: [], water: []};
				var lightLevel = PlantLineValues[document.getElementById("plantSelect").value][0][0];
				var waterLevel = PlantLineValues[document.getElementById("plantSelect").value][1][0];
				console.log('data ' + lightData);
				for (var i = 0; i < lightData.length; i++) {
					if (Math.abs(lightData[i] - lightLevel) > lightLevel * percentDiff) {
						colors.light.push('red');
					}
					else {
						colors.light.push('orange');
					}
				}
				for (var i = 0; i < waterData.length; i++) {
					if (Math.abs(waterData[i] - waterLevel) > waterLevel * percentDiff) {
						colors.water.push('red');
					}
					else {
						colors.water.push('lightblue');
					}
				}
				console.log(colors);
				return colors;
			}

		</script>
	</body>

<script src="https://d3js.org/d3.v7.min.js"></script>

<script type="application/javascript">
	const SERVERADDRESS = "http://127.0.0.1:3000"
	// use XML HTTP request to grab data from the server (central)
	let xmlhttp = new XMLHttpRequest()

	startTime = new Date();
	xmlhttp.onreadystatechange = function () {
		if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
			let responseText = xmlhttp.responseText
			moisture = parseFloat(JSON.parse(responseText).moisture);
			light = parseFloat(JSON.parse(responseText).light);
		}
	}
</script>

</html>
